// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Store {
  id        String   @id @default(cuid())
  name      String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  billboards Billboard[] @relation("StoreToBillboard")
  categories Category[]  @relation("StoreToCategory")
  sizes      Size[]      @relation("StoreToSize")
  colors     Color[]     @relation("StoreToColor")
  brand      Brand[]     @relation("StoreToBrand")
  product    Product[]   @relation("StoreToProduct")
  order      Order[]     @relation("StoreToOrder")
}

model Billboard {
  id         String     @id @default(cuid())
  label      String
  imageUrl   String
  categories Category[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  storeId String
  store   Store  @relation("StoreToBillboard", fields: [storeId], references: [id])
}

model Category {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  store       Store     @relation("StoreToCategory", fields: [storeId], references: [id])
  storeId     String
  billboard   Billboard @relation(fields: [billboardId], references: [id])
  billboardId String

  product Product[] @relation("CategoryToProduct")
}

model Size {
  id        String   @id @default(cuid())
  name      String
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  store   Store  @relation("StoreToSize", fields: [storeId], references: [id])
  storeId String

  product Product[] @relation("SizeToProduct")
}

model Color {
  id        String   @id @default(cuid())
  name      String
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  store   Store  @relation("StoreToColor", fields: [storeId], references: [id])
  storeId String

  product Product[] @relation("ColorToProduct")
}

model Brand {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  store   Store  @relation("StoreToBrand", fields: [storeId], references: [id])
  storeId String

  product Product[] @relation("BrandToProduct")
}

model Product {
  id          String   @id @default(cuid())
  name        String
  price       Decimal
  description String
  cartCount   Int?     @default(0)
  isFeatured  Boolean  @default(false)
  isArchived  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  store      Store    @relation("StoreToProduct", fields: [storeId], references: [id])
  storeId    String
  category   Category @relation("CategoryToProduct", fields: [categoryId], references: [id])
  categoryId String
  size       Size     @relation("SizeToProduct", fields: [sizeId], references: [id])
  sizeId     String
  color      Color    @relation("ColorToProduct", fields: [colorId], references: [id])
  colorId    String
  brand      Brand    @relation("BrandToProduct", fields: [brandId], references: [id])
  brandId    String

  images         Image[]
  orderedProduct OrderedProduct[]
}

model Image {
  id        String   @id @default(cuid())
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
}

model Order {
  id         String   @id @default(cuid())
  isPaid     Boolean  @default(false)
  phone      String   @default("")
  address    String   @default("")
  totalPrice Decimal? 
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  store   Store  @relation("StoreToOrder", fields: [storeId], references: [id])
  storeId String

  orderItem OrderItem[]
}

model OrderItem {
  id String @id @default(cuid())

  order   Order  @relation(fields: [orderId], references: [id])
  orderId String

  orderedProduct OrderedProduct[]
}

model OrderedProduct {
  id        String @id @default(cuid())
  name      String
  cartCount Int    @default(1)

  orderItem   OrderItem @relation(fields: [orderItemId], references: [id])
  orderItemId String
  product     Product   @relation(fields: [productId], references: [id])
  productId   String
}
